set.seed(wSeed)
H42<-c(4,2); Thres<-0.1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
setwd('C:/R DA-ML/12 ANN')
rm(list = ls())
library(doBy)
library(neuralnet)
D.data <-read.csv("bCancerWC.csv",header = T)
D.data$Class <- ifelse(D.data$Class==2,0,1)
#pSeedList <-c(12345,11111,22222,33333,44444,55555,66666,77777,88888,99999)
pSeedList <-c(12345,23456,34567,45678,56789,98082,82168,61200,99999,10101)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(4,2); Thres<-1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
setwd('C:/R DA-ML/12 ANN')
rm(list = ls())
library(doBy)
library(neuralnet)
D.data <-read.csv("bCancerWC.csv",header = T)
D.data$Class <- ifelse(D.data$Class==2,0,1)
#pSeedList <-c(12345,11111,22222,33333,44444,55555,66666,77777,88888,99999)
pSeedList <-c(12345,23456,34567,45678,56789,98082,82168,61200,99999,10101)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(6,3); Thres<-0.01; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
#pSeedList <-c(12345,11111,22222,33333,44444,55555,66666,77777,88888,99999)
pSeedList <-c(12345,23456,34567,45678,56789,66666,82168,61200,99999,10101)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(6,3); Thres<-0.01; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(6,3); Thres<-0.1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
set.seed(pSeed)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(6,3); Thres<-1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
set.seed(pSeed)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(8,5); Thres<-0.01; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(8,5); Thres<-0.1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(8,5); Thres<-1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
H42<-c(4,2); Thres<-0.01; Step<-100000; Rate<-0.01
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(4,2); Thres<-0.01; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(4,2); Thres<-0.1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(4,2); Thres<-1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
#Output.tes <- predict(BPnn,D.tes)
#Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
#cTab<-table(Actual=D.tes$Class,Predict.tes)
#Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
#cat('  Tes =',Accu.tes)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
wSeed<-13579
set.seed(wSeed)
H42<-c(4,2); Thres<-1; Step<-100000; Rate<-0.01
BPnn <-neuralnet(Class~.,D.tra,hidden = H42,threshold = Thres,stepmax = Step,learningrate = Rate,algorithm = 'backprop',err.fct = 'ce',act.fct = 'logistic',linear.output = F)
cutoff<-0.5
options(scipen = 100)
Output.tra <- predict(BPnn,D.tra)
Predict.tra <- ifelse(Output.tra>=cutoff,1,0)
cTab<-table(Actual=D.tra$Class,Predict.tra)
Accu.tra<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
Output.val <- predict(BPnn,D.val)
Predict.val <- ifelse(Output.val>=cutoff,1,0)
cTab<-table(Actual=D.val$Class,Predict.val)
Accu.val<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
##테스트사용
Output.tes <- predict(BPnn,D.tes)
Predict.tes <- ifelse(Output.tes>=cutoff,1,0)
cTab<-table(Actual=D.tes$Class,Predict.tes)
Accu.tes<-round(sum(diag(cTab))/sum(cTab)*100,digits = 2)
cat(sprintf('\n Thres=%4.2f Seed=%5d',Thres,pSeed))
cat('  Tra =',Accu.tra)
cat('  Val =',Accu.val)
cat('  Tes =',Accu.tes)
}
