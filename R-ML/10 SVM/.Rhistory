rm(list = ls())
getwd()
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
getwd()
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
table(D.table)
table(D.date)
table(D.data)
prop.table(table(D.data$Class))
Tra <- read.csv("Tra1.csv",header = T)
Tra <- read.csv("Tra1.csv",header = T)
Val <- read.csv("Val1.csv",header = T)
Tes <- read.csv("Tes1.csv",header = T)
prop.table(table(Tra$Class))
prop.table(table(Val$Class))
prop.table(table(Tes$Class))
table(Tra$Class)
table(Val$Class)
table(Tes$Class)
View(Tra)
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
View(Tra)
View(D.tra)
# Building Decision Tree
install.packages("rpart")
library(rpart)
#rpart는 반드시 seed지정 후 사용
tseed <-12345
set.seed(tseed)
#rpart는 반드시 seed지정 후 사용
tseed <-12345
set.seed(tseed)
# Entropy
e_DT <- rpart(class~.,D.tra,method = 'class',parms = list(split='information'))
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT)
text(e_DT)
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT)
text(e_DT)
plot(e_DT,margin = 0.2)
text(e_DT)
table(D.tra$Thal)
e_Dt
e_DT
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
head(Predict.tra)
head(Actual.tra)
#Confusion Matrix (예측,실제)
library(caret)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
library(e1071)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
head(Predict.tra)
head(Actual.tra)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
head(Predict.tra)
head(Actual.tra)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
#acc0.8708,sen 0.0924 spec 0.8438
cTab <- table(Actual.tra,Predict.tra)
cTab
CM.tra <- confusionMatrix(t(cTab),positive = 'Disease')
CM.tra
CM.tra$overall['Accuracy']
CM.tra$byClass['Sensitivity']
CM.tra$byClass['Specificity']
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
Accu.tra*100
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
cTab <- table(Actual.tra,Predict.tra)
CM.tra <- confusionMatrix(t(cTab),positive = 'Disease')
Accu.tra <- CM.tra$overall['Accuracy']
cTab
Accu.tra*100
# Pruning
printcp(e_Dt)
# Pruning
printcp(e_DT)
cpVal <- e_DT$cptable[which.min(e_DT$cptable[,'xerror']),'CP']
cpVal
cpVal <- e_DT$cptable[which.min(e_DT$cptable[,'xerror']),'cp']
cpVal
cpVal <- e_DT$cptable[which.min(e_DT$cptable[,'xerror']),'CP']
cpVal
pruned.e_DT <- prune(e_DT,cp=cpVal)
plot(pruned.e_DT,margin = 0.2)
text(pruned.e_DT)
Predict.tra <- predict(pruned.e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
cTab <- table(Actual.tra,Predict.tra)
CM.tra <- confusionMatrix(t(cTab),positive = 'Disease')
Accu.tra <- CM.tra$overall['Accuracy']
cTab
Accu.tra*100
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
head(Predict.tra)
head(Actual.tra)
head(Tra)
head(Val)
D.data$Class[1:5]
Predict.tra$Class[1:5]
Predict.tra <- predict(e_DT,D.tra,type="class")
Predict.tra$Class[1:5]
Predict.tra[1:5]
e_DT <- rpart(Class~., D.tra, method='class',parms=list(split="gini"))
g_DT <- rpart(Class~., D.tra, method='class',parms=list(split="gini"))
rm(list = ls())
library(doBy)
data<-read.csv("pjhData.csv",header = T)
trainingRate <- 0.5
validationRate <- 0.3
pSeed <- 1234
set.seed(pSeed)
Training<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=data)
tra.row <-sort(Training$Record)
Training<-data[tra.row,]
temp <-data[-tra.row,]
Validation<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Validation$Record)
Validation<-data[val.row,]
Test<-data[-c(tra.row,val.row),]
data<-read.csv("pjhData.csv",header = T)
getwd()
data<-read.csv("pjhData.csv",header = T)
rm(list = ls())
library(doBy)
data<-read.csv("pjhData.csv",header = T)
trainingRate <- 0.5
validationRate <- 0.3
pSeed <- 1234
set.seed(pSeed)
Training<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=data)
tra.row <-sort(Training$Record)
Training<-data[tra.row,]
temp <-data[-tra.row,]
Validation<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Validation$Record)
Validation<-data[val.row,]
Test<-data[-c(tra.row,val.row),]
Training
Validation
Test
rm(list = ls())
getwd()
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
Tra <- read.csv("Tra1.csv",header = T)
Val <- read.csv("Val1.csv",header = T)
Tes <- read.csv("Tes1.csv",header = T)
table(D.data)
table(Tra$Class)
table(Val$Class)
table(Tes$Class)
head(Tra)
head(Val)
D.data$Class[1:5]
prop.table(table(D.data$Class))
prop.table(table(Tra$Class))
prop.table(table(Val$Class))
prop.table(table(Tes$Class))
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
# Building Decision Tree
library(rpart)
#rpart는 반드시 seed지정 후 사용
tseed <-12345
set.seed(tseed)
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT,margin = 0.2)
text(e_DT)
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT,margin = 0.2)
text(e_DT)
plot(e_DT,margin = 0.2)
text(e_DT)
table(D.tra$Thal) #t6,7 왼쪽 으로간다  bc
e_DT
version
set.seed(tSeed)
Tra <- read.csv("Tra1(1).csv",header = T)
Val <- read.csv("Val1(1).csv",header = T)
Tes <- read.csv("Tes1(1).csv",header = T)
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
#install.packages("e1071")
library(e1071)
x <- subset(D.tra,select=-c(Class))
y<- D.tra$Class
#tune
tSeed <- 12345
set.seed(tSeed)
radial_tune <- tune(svm,x,y,kernel='polynomial',ranges = list(cost=c(50,100,150),gamma=seq(0.1,1,by=0.1)))
radial_tune <- tune(svm,x,y,kernel='radial',ranges = list(cost=c(50,100,150),gamma=seq(0.1,1,by=0.1)))
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='linear',cost=50,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.val)
cTab <- table(Actual=D.val$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
rm(list = ls())
library(e1071)
library(doBy)
pSeedList <-c(12345,23456,34567,45678,56789.98082,21686,99999,00000,88888)
D.data <-read.csv("bCancerWC.csv",header = T)
setwd('C:/R DA-ML/10 SVM')
D.data <-read.csv("bCancerWC.csv",header = T)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='linear',cost=50,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.val)
cTab <- table(Actual=D.val$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='linear',cost=50,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.val)
cTab <- table(Actual=D.val$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
pSeedList <-c(12345,23456,34567,45678,56789,98082,21686,99999,11111,88888)
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='linear',cost=50,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.val)
cTab <- table(Actual=D.val$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='radial',cost=50,gamma=0.4,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.val)
cTab <- table(Actual=D.val$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='sigmoid',cost=50,gamma=0.1,coef0=2,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.val)
cTab <- table(Actual=D.val$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
for (pSeed in pSeedList) {
set.seed(pSeed)
trainingRate <- 0.5
validationRate <- 0.3
Tra<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=D.data)
tra.row <-sort(Tra$Record)
Tra<-D.data[tra.row,]
temp <-D.data[-tra.row,]
Val<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Val$Record)
Val<-D.data[val.row,]
Tes<-D.data[-c(tra.row,val.row),]
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
linearSVM <- svm(Class~.,D.tra,type='C-classification',kernel='linear',cost=50,scale = F)
Predict.tra <- predict(linearSVM,D.tra)
cTab <- table(Actual=D.tra$Class,Predict.tra)
Accu.tra <- sum(diag(cTab))/sum(cTab)*100
Predict.val <- predict(linearSVM,D.tes)
cTab <- table(Actual=D.tes$Class,Predict.val)
Accu.val <- sum(diag(cTab))/sum(cTab)*100
print(pSeed)
print(Accu.tra)
print(Accu.val)
}
