rm(list = ls())
getwd()
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
getwd()
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
table(D.table)
table(D.date)
table(D.data)
prop.table(table(D.data$Class))
Tra <- read.csv("Tra1.csv",header = T)
Tra <- read.csv("Tra1.csv",header = T)
Val <- read.csv("Val1.csv",header = T)
Tes <- read.csv("Tes1.csv",header = T)
prop.table(table(Tra$Class))
prop.table(table(Val$Class))
prop.table(table(Tes$Class))
table(Tra$Class)
table(Val$Class)
table(Tes$Class)
View(Tra)
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
View(Tra)
View(D.tra)
# Building Decision Tree
install.packages("rpart")
library(rpart)
#rpart는 반드시 seed지정 후 사용
tseed <-12345
set.seed(tseed)
#rpart는 반드시 seed지정 후 사용
tseed <-12345
set.seed(tseed)
# Entropy
e_DT <- rpart(class~.,D.tra,method = 'class',parms = list(split='information'))
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT)
text(e_DT)
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT)
text(e_DT)
plot(e_DT,margin = 0.2)
text(e_DT)
table(D.tra$Thal)
e_Dt
e_DT
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
head(Predict.tra)
head(Actual.tra)
#Confusion Matrix (예측,실제)
library(caret)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
library(e1071)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
head(Predict.tra)
head(Actual.tra)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
head(Predict.tra)
head(Actual.tra)
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
#acc0.8708,sen 0.0924 spec 0.8438
cTab <- table(Actual.tra,Predict.tra)
cTab
CM.tra <- confusionMatrix(t(cTab),positive = 'Disease')
CM.tra
CM.tra$overall['Accuracy']
CM.tra$byClass['Sensitivity']
CM.tra$byClass['Specificity']
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
Accu.tra*100
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
cTab <- table(Actual.tra,Predict.tra)
CM.tra <- confusionMatrix(t(cTab),positive = 'Disease')
Accu.tra <- CM.tra$overall['Accuracy']
cTab
Accu.tra*100
# Pruning
printcp(e_Dt)
# Pruning
printcp(e_DT)
cpVal <- e_DT$cptable[which.min(e_DT$cptable[,'xerror']),'CP']
cpVal
cpVal <- e_DT$cptable[which.min(e_DT$cptable[,'xerror']),'cp']
cpVal
cpVal <- e_DT$cptable[which.min(e_DT$cptable[,'xerror']),'CP']
cpVal
pruned.e_DT <- prune(e_DT,cp=cpVal)
plot(pruned.e_DT,margin = 0.2)
text(pruned.e_DT)
Predict.tra <- predict(pruned.e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
cTab <- table(Actual.tra,Predict.tra)
CM.tra <- confusionMatrix(t(cTab),positive = 'Disease')
Accu.tra <- CM.tra$overall['Accuracy']
cTab
Accu.tra*100
CM1 <- confusionMatrix(Predict.tra,Actual.tra,positive = 'Disease')
Predict.tra <- predict(e_DT,D.tra,type="class")
Actual.tra <- D.tra$Class
head(Predict.tra)
head(Actual.tra)
head(Tra)
head(Val)
D.data$Class[1:5]
Predict.tra$Class[1:5]
Predict.tra <- predict(e_DT,D.tra,type="class")
Predict.tra$Class[1:5]
Predict.tra[1:5]
e_DT <- rpart(Class~., D.tra, method='class',parms=list(split="gini"))
g_DT <- rpart(Class~., D.tra, method='class',parms=list(split="gini"))
rm(list = ls())
library(doBy)
data<-read.csv("pjhData.csv",header = T)
trainingRate <- 0.5
validationRate <- 0.3
pSeed <- 1234
set.seed(pSeed)
Training<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=data)
tra.row <-sort(Training$Record)
Training<-data[tra.row,]
temp <-data[-tra.row,]
Validation<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Validation$Record)
Validation<-data[val.row,]
Test<-data[-c(tra.row,val.row),]
data<-read.csv("pjhData.csv",header = T)
getwd()
data<-read.csv("pjhData.csv",header = T)
rm(list = ls())
library(doBy)
data<-read.csv("pjhData.csv",header = T)
trainingRate <- 0.5
validationRate <- 0.3
pSeed <- 1234
set.seed(pSeed)
Training<-sampleBy(formula = ~Z,frac = trainingRate,replace = F,systematic = F,data=data)
tra.row <-sort(Training$Record)
Training<-data[tra.row,]
temp <-data[-tra.row,]
Validation<-sampleBy(formula = ~Z,frac = validationRate/(1-trainingRate),replace = F,systematic = F,data=temp)
val.row <-sort(Validation$Record)
Validation<-data[val.row,]
Test<-data[-c(tra.row,val.row),]
Training
Validation
Test
rm(list = ls())
getwd()
#UCI machine learning repository
D.data <- read.csv("HeartD.csv",header = T)
Tra <- read.csv("Tra1.csv",header = T)
Val <- read.csv("Val1.csv",header = T)
Tes <- read.csv("Tes1.csv",header = T)
table(D.data)
table(Tra$Class)
table(Val$Class)
table(Tes$Class)
head(Tra)
head(Val)
D.data$Class[1:5]
prop.table(table(D.data$Class))
prop.table(table(Tra$Class))
prop.table(table(Val$Class))
prop.table(table(Tes$Class))
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
# Building Decision Tree
library(rpart)
#rpart는 반드시 seed지정 후 사용
tseed <-12345
set.seed(tseed)
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT,margin = 0.2)
text(e_DT)
# Entropy
e_DT <- rpart(Class~.,D.tra,method = 'class',parms = list(split='information'))
plot(e_DT,margin = 0.2)
text(e_DT)
plot(e_DT,margin = 0.2)
text(e_DT)
table(D.tra$Thal) #t6,7 왼쪽 으로간다  bc
e_DT
version
set.seed(tSeed)
Tra <- read.csv("Tra1(1).csv",header = T)
Val <- read.csv("Val1(1).csv",header = T)
Tes <- read.csv("Tes1(1).csv",header = T)
D.tra <- Tra[,-c(1)]
D.val <- Val[,-c(1)]
D.tes <- Tes[,-c(1)]
#install.packages("e1071")
library(e1071)
x <- subset(D.tra,select=-c(Class))
y<- D.tra$Class
#tune
tSeed <- 12345
set.seed(tSeed)
radial_tune <- tune(svm,x,y,kernel='polynomial',ranges = list(cost=c(50,100,150),gamma=seq(0.1,1,by=0.1)))
radial_tune <- tune(svm,x,y,kernel='radial',ranges = list(cost=c(50,100,150),gamma=seq(0.1,1,by=0.1)))
rm(list = ls())
library(tensorflow)
library(keras)
Tra <- read.csv("Tra1.csv",header = T)
Val <- read.csv("Val1.csv",header = T)
Tes <- read.csv("Tes1.csv",header = T)
#D.tra <- Tra[,-c(1)]
#D.val <- Val[,-c(1)]
#D.tes <- Tes[,-c(1)]
Tra$Class <- ifelse(Tra$Class==2,0,1)
Val$Class <- ifelse(Val$Class==2,0,1)
Tes$Class <- ifelse(Tes$Class==2,0,1)
x_Tra <- as.matrix(subset(Tra, select = -c(Record,Class)))
y_Tra <- as.matrix(Tra$Class)
x_Val <- as.matrix(subset(Val, select = -c(Record,Class)))
y_Val <- as.matrix(Val$Class)
x_Tes <- as.matrix(subset(Tes, select = -c(Record,Class)))
y_Tes <- as.matrix(Tes$Class)
wSeed <- 13579
tf$random$set_seed(wSeed)
dnnH3 <- keras_model_sequential() %>%
layer_dense(units = 20,input_shape = 9) %>%
layer_dense(units = 15,activation = 'relu') %>%
layer_dense(units = 7,activation = 'relu') %>%
layer_dense(units = 1,activation = 'sigmoid')
Rate <- 0.05
dnnH3 %>% compile(optimizer=optimizer_sgd(lr=Rate),
loss='binary_crossentropy',
metrics=c('accuracy'))
rm(list = ls())
a <- c("딸기","메론","파인애플")
attributes(a)
as.factor(a)
attributes(a)
as.factor(a)
attributes(a)
a
a <- as.factor(a)
attributes(a)
attributes(a)
a <- c("딸기","메론","파인애플")
as.factor(a)
attributes(a)
a <- as.factor(a)
a
a <- c("딸기","메론","파인애플")
a
a <- as.factor(a)
a
b <- c(1,2,3,4)
b
b <- c(1,2,3,4) ;b
b <- 1:4 ; b
attributes(b)
b <- as.factor(b)
b
c <- matrix(1:8,nrow=2,ncol=3)
c <- matrix(1:8,nrow=2,ncol=4)
c
c <- matrix(1:8,nrow=2,ncol=4,byrow=T)
c
c <- matrix(1:8,nrow=2,ncol=4,byrow=T,dimnames = list(c("row1","row2"),c("col1","col2","col3","col4")
c
c <- matrix(1:8,nrow=2,ncol=4,byrow=T,dimnames = list(c("row1","row2"),c("col1","col2","col3","col4"))
c
c <- matrix(1:8,nrow=2,ncol=4,byrow=T,dimnames = list(c("row1","row2"),c("col1","col2","col3","col4"))
c
c <- matrix(1:8,nrow=2,ncol=4,byrow=T,dimnames = list(c("row1","row2"),c("col1","col2","col3","col4")))
c
cbind(c,10,11)
cbind(c,c(10,11))
cbind(c,10:11)
c
c <- cbind(c,10:11)
c
rbind(c,12:16)
c <- rbind(c,12:16)
c <- matrix(1:8,nrow=2,ncol=4,byrow=T)#,dimnames = list(c("row1","row2"),c("col1","col2","col3","col4")))
c
c <- cbind(c,10:11)
c <- rbind(c,12:16)
c
c[1,1]
c[1,1] <- 100
c
library(nnet)
library(rpart)
library(randomForest)
library(nnet)
library(rpart)
library(randomForest)
library(dplyr)
library(caret)
library(caret)
library(DT)
install.packages(DT)
install.packages("DT")
library(DT)
#install.packages("DT")
library(class)
library(ggvis)
install.packages("ggvis")
install.packages("ggvis")
library(ggvis)
#install.packages("ggvis")
library(kernlab)
install.packages("kernlab")
#install.packages("ggvis")
library(kernlab)
#install.packages("kernlab")
iris
#install.packages("kernlab")
show(iris)
#install.packages("kernlab")
iris
str(iris)
iris[0,1]
iris[1]
iris[5]
iris[1]
#install.packages("kernlab")
df <- iris
str(df)
as.factor(df[1])
str(df)
df <- as.factor(df[1])
str(df)
#install.packages("kernlab")
df <- iris
df <- as.character(df[1])
str(df)
#install.packages("kernlab")
df <- iris
df[1] <- as.character(df[1])
str(df)
str(df)
df[1] <- as.numeric(df[1])
df[1] <- as.numeric(unlist(df[1]))
str(df)
#install.packages("kernlab")
df <- iris
class(df[1])
df[1] <- as.character(df[1])
class(df[1])
df[1] <- as.numeric(unlist(df[1]))
class(df[1])
str(df)
#install.packages("kernlab")
df <- iris
#install.packages("kernlab")
df <- iris
df
str(df)
a <-c(1,2,4) ;a
print(i)
a <-c(1,2,4) ;a
for(i in a)
for(i in a) print(i)
a <-c(1,2,4) ;a
for(i in a) print(i)
print(i)
for(i in a) print(i)
rm(list = ls())
